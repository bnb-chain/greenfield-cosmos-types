//@ts-nocheck
/* eslint-disable */
import { Long, isSet, DeepPartial, Exact } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export const protobufPackage = "greenfield.virtualgroup";
export interface EventCreateGlobalVirtualGroup {
  /** The unique id of global virtual group, which is generated by blockchain */
  id: number;
  /** The id of the global virtual group family where the gvg belongs */
  familyId: number;
  /** The id of the primary sp who create this global virtual group */
  primarySpId: number;
  /** The ids of the secondary sps which belongs to this global virtual group */
  secondarySpIds: number[];
  /** The store size of all the objects stores in this global virtual group */
  storedSize: Long;
  /**
   * The virtual payment address of this global virtual group, which is auto generated by blockchain
   * And, all users' payment flows will flow to this account
   */
  virtualPaymentAddress: string;
  /** The total amount of the staking for this global virtual group */
  totalDeposit: string;
}
export interface EventCreateGlobalVirtualGroupProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroup";
  value: Uint8Array;
}
export interface EventCreateGlobalVirtualGroupSDKType {
  id: number;
  family_id: number;
  primary_sp_id: number;
  secondary_sp_ids: number[];
  stored_size: Long;
  virtual_payment_address: string;
  total_deposit: string;
}
export interface EventUpdateGlobalVirtualGroup {
  /** The id of global virtual group, which has been updated */
  id: number;
  /** The store size of all the objects stores in this global virtual group */
  storeSize: Long;
  /** The total amount of the staking for this global virtual group */
  totalDeposit: string;
  /** Primary SP ID represents the unique id of the primary storage provider in the group. */
  primarySpId: number;
  /** Secondary SP IDs represents the list of unique identifiers of the secondary storage providers in the group. */
  secondarySpIds: number[];
}
export interface EventUpdateGlobalVirtualGroupProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroup";
  value: Uint8Array;
}
export interface EventUpdateGlobalVirtualGroupSDKType {
  id: number;
  store_size: Long;
  total_deposit: string;
  primary_sp_id: number;
  secondary_sp_ids: number[];
}
export interface EventDeleteGlobalVirtualGroup {
  /** The id of global virtual group, which has been deleted */
  id: number;
  /** The id of the primary sp who create this global virtual group family */
  primarySpId: number;
}
export interface EventDeleteGlobalVirtualGroupProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroup";
  value: Uint8Array;
}
export interface EventDeleteGlobalVirtualGroupSDKType {
  id: number;
  primary_sp_id: number;
}
export interface EventCreateGlobalVirtualGroupFamily {
  /** The id of global virtual group family, which is auto generated by blockchain */
  id: number;
  /** The id of the primary sp who create this global virtual group family */
  primarySpId: number;
  /**
   * The virtual payment address of this global virtual group family, which is auto generated by blockcahin
   * all users' read quota payment flows will flow to this account.
   */
  virtualPaymentAddress: string;
  /** global_virtual_group_ids are the ids of gvgs in this family */
  globalVirtualGroupIds: number[];
}
export interface EventCreateGlobalVirtualGroupFamilyProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroupFamily";
  value: Uint8Array;
}
export interface EventCreateGlobalVirtualGroupFamilySDKType {
  id: number;
  primary_sp_id: number;
  virtual_payment_address: string;
  global_virtual_group_ids: number[];
}
export interface EventUpdateGlobalVirtualGroupFamily {
  /** The id of global virtual group family, which is auto generated by blockchain */
  id: number;
  /** The id of the primary sp who create this global virtual group family */
  primarySpId: number;
  /** global_virtual_group_ids are the ids of gvgs in this family */
  globalVirtualGroupIds: number[];
}
export interface EventUpdateGlobalVirtualGroupFamilyProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroupFamily";
  value: Uint8Array;
}
export interface EventUpdateGlobalVirtualGroupFamilySDKType {
  id: number;
  primary_sp_id: number;
  global_virtual_group_ids: number[];
}
export interface EventDeleteGlobalVirtualGroupFamily {
  /** The id of global virtual group family, which is auto generated by blockchain */
  id: number;
  /** The id of the primary sp who create this global virtual group family */
  primarySpId: number;
}
export interface EventDeleteGlobalVirtualGroupFamilyProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroupFamily";
  value: Uint8Array;
}
export interface EventDeleteGlobalVirtualGroupFamilySDKType {
  id: number;
  primary_sp_id: number;
}
export interface EventCreateLocalVirtualGroup {
  /**
   * The id of the local virtual group and this ID is unique within the bucket
   * and different buckets will have the same ID
   */
  id: number;
  /** The id of the bucket */
  bucketId: string;
  /** The id of the global virtual group */
  globalVirtualGroupId: number;
  /** The stored size of all the objects stores in this lvg */
  storedSize: Long;
}
export interface EventCreateLocalVirtualGroupProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventCreateLocalVirtualGroup";
  value: Uint8Array;
}
export interface EventCreateLocalVirtualGroupSDKType {
  id: number;
  bucket_id: string;
  global_virtual_group_id: number;
  stored_size: Long;
}
export interface EventUpdateLocalVirtualGroup {
  /** The id of the local virtual group */
  id: number;
  /** The id of the bucket */
  bucketId: string;
  /** The global_virtual_group_id is gvgid of lvg after migrate */
  globalVirtualGroupId: number;
  /** The stored size of all the objects stores in this lvg */
  storedSize: Long;
}
export interface EventUpdateLocalVirtualGroupProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventUpdateLocalVirtualGroup";
  value: Uint8Array;
}
export interface EventUpdateLocalVirtualGroupSDKType {
  id: number;
  bucket_id: string;
  global_virtual_group_id: number;
  stored_size: Long;
}
export interface EventDeleteLocalVirtualGroup {
  /** The id of the local virtual group */
  id: number;
  /** The id of the bucket */
  bucketId: string;
}
export interface EventDeleteLocalVirtualGroupProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventDeleteLocalVirtualGroup";
  value: Uint8Array;
}
export interface EventDeleteLocalVirtualGroupSDKType {
  id: number;
  bucket_id: string;
}
export interface EventSwapOut {
  /** The id of the storage provider who wants to swap out */
  storageProviderId: number;
  /** The id of the gvg family which the storage provider wants to swap out as primary sp */
  globalVirtualGroupFamilyId: number;
  /** The ids of the gvgs which the storage provider wants to swap out as secondary sp */
  globalVirtualGroupIds: number[];
  /** The id of the successor sp who take over this family or these gvgs */
  successorSpId: number;
}
export interface EventSwapOutProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventSwapOut";
  value: Uint8Array;
}
export interface EventSwapOutSDKType {
  storage_provider_id: number;
  global_virtual_group_family_id: number;
  global_virtual_group_ids: number[];
  successor_sp_id: number;
}
export interface EventCompleteSwapOut {
  /** The id of the storage provider who complete swap out. */
  storageProviderId: number;
  /** The id of the storage provider who swap out the family or gvgs */
  srcStorageProviderId: number;
  /** The id of the gvg family */
  globalVirtualGroupFamilyId: number;
  /** The ids of the gvgs */
  globalVirtualGroupIds: number[];
}
export interface EventCompleteSwapOutProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventCompleteSwapOut";
  value: Uint8Array;
}
export interface EventCompleteSwapOutSDKType {
  storage_provider_id: number;
  src_storage_provider_id: number;
  global_virtual_group_family_id: number;
  global_virtual_group_ids: number[];
}
export interface EventCancelSwapOut {
  /** The id of the storage provider who cancel swap out. */
  storageProviderId: number;
  /** The id of the gvg family */
  globalVirtualGroupFamilyId: number;
  /** The ids of the gvgs */
  globalVirtualGroupIds: number[];
  /** The id of the successor sp who take over this family or these gvgs */
  successorSpId: number;
}
export interface EventCancelSwapOutProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventCancelSwapOut";
  value: Uint8Array;
}
export interface EventCancelSwapOutSDKType {
  storage_provider_id: number;
  global_virtual_group_family_id: number;
  global_virtual_group_ids: number[];
  successor_sp_id: number;
}
export interface EventStorageProviderExit {
  /** The id of the storage provider who wants to exit */
  storageProviderId: number;
  /** The operator address of the storage provider who wants to exit */
  operatorAddress: string;
}
export interface EventStorageProviderExitProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventStorageProviderExit";
  value: Uint8Array;
}
export interface EventStorageProviderExitSDKType {
  storage_provider_id: number;
  operator_address: string;
}
export interface EventCompleteStorageProviderExit {
  /** The id of the storage provider who complete exit */
  storageProviderId: number;
  /** The operator address which initial the complete exit transaction */
  operatorAddress: string;
  /** total_deposit defines the number of tokens deposited by this storage provider for staking. */
  totalDeposit: string;
}
export interface EventCompleteStorageProviderExitProtoMsg {
  typeUrl: "/greenfield.virtualgroup.EventCompleteStorageProviderExit";
  value: Uint8Array;
}
export interface EventCompleteStorageProviderExitSDKType {
  storage_provider_id: number;
  operator_address: string;
  total_deposit: string;
}
function createBaseEventCreateGlobalVirtualGroup(): EventCreateGlobalVirtualGroup {
  return {
    id: 0,
    familyId: 0,
    primarySpId: 0,
    secondarySpIds: [],
    storedSize: Long.UZERO,
    virtualPaymentAddress: "",
    totalDeposit: ""
  };
}
export const EventCreateGlobalVirtualGroup = {
  typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroup",
  encode(message: EventCreateGlobalVirtualGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.familyId !== 0) {
      writer.uint32(16).uint32(message.familyId);
    }
    if (message.primarySpId !== 0) {
      writer.uint32(24).uint32(message.primarySpId);
    }
    writer.uint32(34).fork();
    for (const v of message.secondarySpIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    if (!message.storedSize.isZero()) {
      writer.uint32(40).uint64(message.storedSize);
    }
    if (message.virtualPaymentAddress !== "") {
      writer.uint32(50).string(message.virtualPaymentAddress);
    }
    if (message.totalDeposit !== "") {
      writer.uint32(58).string(message.totalDeposit);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateGlobalVirtualGroup {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateGlobalVirtualGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.uint32();
          break;
        case 2:
          message.familyId = reader.uint32();
          break;
        case 3:
          message.primarySpId = reader.uint32();
          break;
        case 4:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.secondarySpIds.push(reader.uint32());
            }
          } else {
            message.secondarySpIds.push(reader.uint32());
          }
          break;
        case 5:
          message.storedSize = (reader.uint64() as Long);
          break;
        case 6:
          message.virtualPaymentAddress = reader.string();
          break;
        case 7:
          message.totalDeposit = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventCreateGlobalVirtualGroup {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      familyId: isSet(object.familyId) ? Number(object.familyId) : 0,
      primarySpId: isSet(object.primarySpId) ? Number(object.primarySpId) : 0,
      secondarySpIds: Array.isArray(object?.secondarySpIds) ? object.secondarySpIds.map((e: any) => Number(e)) : [],
      storedSize: isSet(object.storedSize) ? Long.fromValue(object.storedSize) : Long.UZERO,
      virtualPaymentAddress: isSet(object.virtualPaymentAddress) ? String(object.virtualPaymentAddress) : "",
      totalDeposit: isSet(object.totalDeposit) ? String(object.totalDeposit) : ""
    };
  },
  toJSON(message: EventCreateGlobalVirtualGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.familyId !== undefined && (obj.familyId = Math.round(message.familyId));
    message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
    if (message.secondarySpIds) {
      obj.secondarySpIds = message.secondarySpIds.map(e => Math.round(e));
    } else {
      obj.secondarySpIds = [];
    }
    message.storedSize !== undefined && (obj.storedSize = (message.storedSize || Long.UZERO).toString());
    message.virtualPaymentAddress !== undefined && (obj.virtualPaymentAddress = message.virtualPaymentAddress);
    message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateGlobalVirtualGroup>, I>>(object: I): EventCreateGlobalVirtualGroup {
    const message = createBaseEventCreateGlobalVirtualGroup();
    message.id = object.id ?? 0;
    message.familyId = object.familyId ?? 0;
    message.primarySpId = object.primarySpId ?? 0;
    message.secondarySpIds = object.secondarySpIds?.map(e => e) || [];
    message.storedSize = object.storedSize !== undefined && object.storedSize !== null ? Long.fromValue(object.storedSize) : Long.UZERO;
    message.virtualPaymentAddress = object.virtualPaymentAddress ?? "";
    message.totalDeposit = object.totalDeposit ?? "";
    return message;
  },
  fromSDK(object: EventCreateGlobalVirtualGroupSDKType): EventCreateGlobalVirtualGroup {
    return {
      id: object?.id,
      familyId: object?.family_id,
      primarySpId: object?.primary_sp_id,
      secondarySpIds: Array.isArray(object?.secondary_sp_ids) ? object.secondary_sp_ids.map((e: any) => e) : [],
      storedSize: object?.stored_size,
      virtualPaymentAddress: object?.virtual_payment_address,
      totalDeposit: object?.total_deposit
    };
  },
  toSDK(message: EventCreateGlobalVirtualGroup): EventCreateGlobalVirtualGroupSDKType {
    const obj: any = {};
    obj.id = message.id;
    obj.family_id = message.familyId;
    obj.primary_sp_id = message.primarySpId;
    if (message.secondarySpIds) {
      obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
    } else {
      obj.secondary_sp_ids = [];
    }
    obj.stored_size = message.storedSize;
    obj.virtual_payment_address = message.virtualPaymentAddress;
    obj.total_deposit = message.totalDeposit;
    return obj;
  },
  fromAmino(object: EventCreateGlobalVirtualGroupAmino): EventCreateGlobalVirtualGroup {
    const message = createBaseEventCreateGlobalVirtualGroup();
    if (object.id !== undefined && object.id !== null) {
      message.id = object.id;
    }
    if (object.family_id !== undefined && object.family_id !== null) {
      message.familyId = object.family_id;
    }
    if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
      message.primarySpId = object.primary_sp_id;
    }
    message.secondarySpIds = object.secondary_sp_ids?.map(e => e) || [];
    if (object.stored_size !== undefined && object.stored_size !== null) {
      message.storedSize = Long.fromString(object.stored_size);
    }
    if (object.virtual_payment_address !== undefined && object.virtual_payment_address !== null) {
      message.virtualPaymentAddress = object.virtual_payment_address;
    }
    if (object.total_deposit !== undefined && object.total_deposit !== null) {
      message.totalDeposit = object.total_deposit;
    }
    return message;
  },
  toAmino(message: EventCreateGlobalVirtualGroup): EventCreateGlobalVirtualGroupAmino {
    const obj: any = {};
    obj.id = message.id;
    obj.family_id = message.familyId;
    obj.primary_sp_id = message.primarySpId;
    if (message.secondarySpIds) {
      obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
    } else {
      obj.secondary_sp_ids = [];
    }
    obj.stored_size = message.storedSize ? message.storedSize.toString() : undefined;
    obj.virtual_payment_address = message.virtualPaymentAddress;
    obj.total_deposit = message.totalDeposit;
    return obj;
  },
  fromAminoMsg(object: EventCreateGlobalVirtualGroupAminoMsg): EventCreateGlobalVirtualGroup {
    return EventCreateGlobalVirtualGroup.fromAmino(object.value);
  },
  fromProtoMsg(message: EventCreateGlobalVirtualGroupProtoMsg): EventCreateGlobalVirtualGroup {
    return EventCreateGlobalVirtualGroup.decode(message.value);
  },
  toProto(message: EventCreateGlobalVirtualGroup): Uint8Array {
    return EventCreateGlobalVirtualGroup.encode(message).finish();
  },
  toProtoMsg(message: EventCreateGlobalVirtualGroup): EventCreateGlobalVirtualGroupProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroup",
      value: EventCreateGlobalVirtualGroup.encode(message).finish()
    };
  }
};
function createBaseEventUpdateGlobalVirtualGroup(): EventUpdateGlobalVirtualGroup {
  return {
    id: 0,
    storeSize: Long.UZERO,
    totalDeposit: "",
    primarySpId: 0,
    secondarySpIds: []
  };
}
export const EventUpdateGlobalVirtualGroup = {
  typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroup",
  encode(message: EventUpdateGlobalVirtualGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (!message.storeSize.isZero()) {
      writer.uint32(16).uint64(message.storeSize);
    }
    if (message.totalDeposit !== "") {
      writer.uint32(26).string(message.totalDeposit);
    }
    if (message.primarySpId !== 0) {
      writer.uint32(32).uint32(message.primarySpId);
    }
    writer.uint32(42).fork();
    for (const v of message.secondarySpIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventUpdateGlobalVirtualGroup {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventUpdateGlobalVirtualGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.uint32();
          break;
        case 2:
          message.storeSize = (reader.uint64() as Long);
          break;
        case 3:
          message.totalDeposit = reader.string();
          break;
        case 4:
          message.primarySpId = reader.uint32();
          break;
        case 5:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.secondarySpIds.push(reader.uint32());
            }
          } else {
            message.secondarySpIds.push(reader.uint32());
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventUpdateGlobalVirtualGroup {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      storeSize: isSet(object.storeSize) ? Long.fromValue(object.storeSize) : Long.UZERO,
      totalDeposit: isSet(object.totalDeposit) ? String(object.totalDeposit) : "",
      primarySpId: isSet(object.primarySpId) ? Number(object.primarySpId) : 0,
      secondarySpIds: Array.isArray(object?.secondarySpIds) ? object.secondarySpIds.map((e: any) => Number(e)) : []
    };
  },
  toJSON(message: EventUpdateGlobalVirtualGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.storeSize !== undefined && (obj.storeSize = (message.storeSize || Long.UZERO).toString());
    message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit);
    message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
    if (message.secondarySpIds) {
      obj.secondarySpIds = message.secondarySpIds.map(e => Math.round(e));
    } else {
      obj.secondarySpIds = [];
    }
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventUpdateGlobalVirtualGroup>, I>>(object: I): EventUpdateGlobalVirtualGroup {
    const message = createBaseEventUpdateGlobalVirtualGroup();
    message.id = object.id ?? 0;
    message.storeSize = object.storeSize !== undefined && object.storeSize !== null ? Long.fromValue(object.storeSize) : Long.UZERO;
    message.totalDeposit = object.totalDeposit ?? "";
    message.primarySpId = object.primarySpId ?? 0;
    message.secondarySpIds = object.secondarySpIds?.map(e => e) || [];
    return message;
  },
  fromSDK(object: EventUpdateGlobalVirtualGroupSDKType): EventUpdateGlobalVirtualGroup {
    return {
      id: object?.id,
      storeSize: object?.store_size,
      totalDeposit: object?.total_deposit,
      primarySpId: object?.primary_sp_id,
      secondarySpIds: Array.isArray(object?.secondary_sp_ids) ? object.secondary_sp_ids.map((e: any) => e) : []
    };
  },
  toSDK(message: EventUpdateGlobalVirtualGroup): EventUpdateGlobalVirtualGroupSDKType {
    const obj: any = {};
    obj.id = message.id;
    obj.store_size = message.storeSize;
    obj.total_deposit = message.totalDeposit;
    obj.primary_sp_id = message.primarySpId;
    if (message.secondarySpIds) {
      obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
    } else {
      obj.secondary_sp_ids = [];
    }
    return obj;
  },
  fromAmino(object: EventUpdateGlobalVirtualGroupAmino): EventUpdateGlobalVirtualGroup {
    const message = createBaseEventUpdateGlobalVirtualGroup();
    if (object.id !== undefined && object.id !== null) {
      message.id = object.id;
    }
    if (object.store_size !== undefined && object.store_size !== null) {
      message.storeSize = Long.fromString(object.store_size);
    }
    if (object.total_deposit !== undefined && object.total_deposit !== null) {
      message.totalDeposit = object.total_deposit;
    }
    if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
      message.primarySpId = object.primary_sp_id;
    }
    message.secondarySpIds = object.secondary_sp_ids?.map(e => e) || [];
    return message;
  },
  toAmino(message: EventUpdateGlobalVirtualGroup): EventUpdateGlobalVirtualGroupAmino {
    const obj: any = {};
    obj.id = message.id;
    obj.store_size = message.storeSize ? message.storeSize.toString() : undefined;
    obj.total_deposit = message.totalDeposit;
    obj.primary_sp_id = message.primarySpId;
    if (message.secondarySpIds) {
      obj.secondary_sp_ids = message.secondarySpIds.map(e => e);
    } else {
      obj.secondary_sp_ids = [];
    }
    return obj;
  },
  fromAminoMsg(object: EventUpdateGlobalVirtualGroupAminoMsg): EventUpdateGlobalVirtualGroup {
    return EventUpdateGlobalVirtualGroup.fromAmino(object.value);
  },
  fromProtoMsg(message: EventUpdateGlobalVirtualGroupProtoMsg): EventUpdateGlobalVirtualGroup {
    return EventUpdateGlobalVirtualGroup.decode(message.value);
  },
  toProto(message: EventUpdateGlobalVirtualGroup): Uint8Array {
    return EventUpdateGlobalVirtualGroup.encode(message).finish();
  },
  toProtoMsg(message: EventUpdateGlobalVirtualGroup): EventUpdateGlobalVirtualGroupProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroup",
      value: EventUpdateGlobalVirtualGroup.encode(message).finish()
    };
  }
};
function createBaseEventDeleteGlobalVirtualGroup(): EventDeleteGlobalVirtualGroup {
  return {
    id: 0,
    primarySpId: 0
  };
}
export const EventDeleteGlobalVirtualGroup = {
  typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroup",
  encode(message: EventDeleteGlobalVirtualGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.primarySpId !== 0) {
      writer.uint32(16).uint32(message.primarySpId);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventDeleteGlobalVirtualGroup {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDeleteGlobalVirtualGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.uint32();
          break;
        case 2:
          message.primarySpId = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventDeleteGlobalVirtualGroup {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      primarySpId: isSet(object.primarySpId) ? Number(object.primarySpId) : 0
    };
  },
  toJSON(message: EventDeleteGlobalVirtualGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventDeleteGlobalVirtualGroup>, I>>(object: I): EventDeleteGlobalVirtualGroup {
    const message = createBaseEventDeleteGlobalVirtualGroup();
    message.id = object.id ?? 0;
    message.primarySpId = object.primarySpId ?? 0;
    return message;
  },
  fromSDK(object: EventDeleteGlobalVirtualGroupSDKType): EventDeleteGlobalVirtualGroup {
    return {
      id: object?.id,
      primarySpId: object?.primary_sp_id
    };
  },
  toSDK(message: EventDeleteGlobalVirtualGroup): EventDeleteGlobalVirtualGroupSDKType {
    const obj: any = {};
    obj.id = message.id;
    obj.primary_sp_id = message.primarySpId;
    return obj;
  },
  fromAmino(object: EventDeleteGlobalVirtualGroupAmino): EventDeleteGlobalVirtualGroup {
    const message = createBaseEventDeleteGlobalVirtualGroup();
    if (object.id !== undefined && object.id !== null) {
      message.id = object.id;
    }
    if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
      message.primarySpId = object.primary_sp_id;
    }
    return message;
  },
  toAmino(message: EventDeleteGlobalVirtualGroup): EventDeleteGlobalVirtualGroupAmino {
    const obj: any = {};
    obj.id = message.id;
    obj.primary_sp_id = message.primarySpId;
    return obj;
  },
  fromAminoMsg(object: EventDeleteGlobalVirtualGroupAminoMsg): EventDeleteGlobalVirtualGroup {
    return EventDeleteGlobalVirtualGroup.fromAmino(object.value);
  },
  fromProtoMsg(message: EventDeleteGlobalVirtualGroupProtoMsg): EventDeleteGlobalVirtualGroup {
    return EventDeleteGlobalVirtualGroup.decode(message.value);
  },
  toProto(message: EventDeleteGlobalVirtualGroup): Uint8Array {
    return EventDeleteGlobalVirtualGroup.encode(message).finish();
  },
  toProtoMsg(message: EventDeleteGlobalVirtualGroup): EventDeleteGlobalVirtualGroupProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroup",
      value: EventDeleteGlobalVirtualGroup.encode(message).finish()
    };
  }
};
function createBaseEventCreateGlobalVirtualGroupFamily(): EventCreateGlobalVirtualGroupFamily {
  return {
    id: 0,
    primarySpId: 0,
    virtualPaymentAddress: "",
    globalVirtualGroupIds: []
  };
}
export const EventCreateGlobalVirtualGroupFamily = {
  typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroupFamily",
  encode(message: EventCreateGlobalVirtualGroupFamily, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.primarySpId !== 0) {
      writer.uint32(16).uint32(message.primarySpId);
    }
    if (message.virtualPaymentAddress !== "") {
      writer.uint32(26).string(message.virtualPaymentAddress);
    }
    writer.uint32(34).fork();
    for (const v of message.globalVirtualGroupIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateGlobalVirtualGroupFamily {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateGlobalVirtualGroupFamily();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.uint32();
          break;
        case 2:
          message.primarySpId = reader.uint32();
          break;
        case 3:
          message.virtualPaymentAddress = reader.string();
          break;
        case 4:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.globalVirtualGroupIds.push(reader.uint32());
            }
          } else {
            message.globalVirtualGroupIds.push(reader.uint32());
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventCreateGlobalVirtualGroupFamily {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      primarySpId: isSet(object.primarySpId) ? Number(object.primarySpId) : 0,
      virtualPaymentAddress: isSet(object.virtualPaymentAddress) ? String(object.virtualPaymentAddress) : "",
      globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e: any) => Number(e)) : []
    };
  },
  toJSON(message: EventCreateGlobalVirtualGroupFamily): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
    message.virtualPaymentAddress !== undefined && (obj.virtualPaymentAddress = message.virtualPaymentAddress);
    if (message.globalVirtualGroupIds) {
      obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
    } else {
      obj.globalVirtualGroupIds = [];
    }
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateGlobalVirtualGroupFamily>, I>>(object: I): EventCreateGlobalVirtualGroupFamily {
    const message = createBaseEventCreateGlobalVirtualGroupFamily();
    message.id = object.id ?? 0;
    message.primarySpId = object.primarySpId ?? 0;
    message.virtualPaymentAddress = object.virtualPaymentAddress ?? "";
    message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
    return message;
  },
  fromSDK(object: EventCreateGlobalVirtualGroupFamilySDKType): EventCreateGlobalVirtualGroupFamily {
    return {
      id: object?.id,
      primarySpId: object?.primary_sp_id,
      virtualPaymentAddress: object?.virtual_payment_address,
      globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e: any) => e) : []
    };
  },
  toSDK(message: EventCreateGlobalVirtualGroupFamily): EventCreateGlobalVirtualGroupFamilySDKType {
    const obj: any = {};
    obj.id = message.id;
    obj.primary_sp_id = message.primarySpId;
    obj.virtual_payment_address = message.virtualPaymentAddress;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    return obj;
  },
  fromAmino(object: EventCreateGlobalVirtualGroupFamilyAmino): EventCreateGlobalVirtualGroupFamily {
    const message = createBaseEventCreateGlobalVirtualGroupFamily();
    if (object.id !== undefined && object.id !== null) {
      message.id = object.id;
    }
    if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
      message.primarySpId = object.primary_sp_id;
    }
    if (object.virtual_payment_address !== undefined && object.virtual_payment_address !== null) {
      message.virtualPaymentAddress = object.virtual_payment_address;
    }
    message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
    return message;
  },
  toAmino(message: EventCreateGlobalVirtualGroupFamily): EventCreateGlobalVirtualGroupFamilyAmino {
    const obj: any = {};
    obj.id = message.id;
    obj.primary_sp_id = message.primarySpId;
    obj.virtual_payment_address = message.virtualPaymentAddress;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    return obj;
  },
  fromAminoMsg(object: EventCreateGlobalVirtualGroupFamilyAminoMsg): EventCreateGlobalVirtualGroupFamily {
    return EventCreateGlobalVirtualGroupFamily.fromAmino(object.value);
  },
  fromProtoMsg(message: EventCreateGlobalVirtualGroupFamilyProtoMsg): EventCreateGlobalVirtualGroupFamily {
    return EventCreateGlobalVirtualGroupFamily.decode(message.value);
  },
  toProto(message: EventCreateGlobalVirtualGroupFamily): Uint8Array {
    return EventCreateGlobalVirtualGroupFamily.encode(message).finish();
  },
  toProtoMsg(message: EventCreateGlobalVirtualGroupFamily): EventCreateGlobalVirtualGroupFamilyProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventCreateGlobalVirtualGroupFamily",
      value: EventCreateGlobalVirtualGroupFamily.encode(message).finish()
    };
  }
};
function createBaseEventUpdateGlobalVirtualGroupFamily(): EventUpdateGlobalVirtualGroupFamily {
  return {
    id: 0,
    primarySpId: 0,
    globalVirtualGroupIds: []
  };
}
export const EventUpdateGlobalVirtualGroupFamily = {
  typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroupFamily",
  encode(message: EventUpdateGlobalVirtualGroupFamily, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.primarySpId !== 0) {
      writer.uint32(16).uint32(message.primarySpId);
    }
    writer.uint32(26).fork();
    for (const v of message.globalVirtualGroupIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventUpdateGlobalVirtualGroupFamily {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventUpdateGlobalVirtualGroupFamily();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.uint32();
          break;
        case 2:
          message.primarySpId = reader.uint32();
          break;
        case 3:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.globalVirtualGroupIds.push(reader.uint32());
            }
          } else {
            message.globalVirtualGroupIds.push(reader.uint32());
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventUpdateGlobalVirtualGroupFamily {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      primarySpId: isSet(object.primarySpId) ? Number(object.primarySpId) : 0,
      globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e: any) => Number(e)) : []
    };
  },
  toJSON(message: EventUpdateGlobalVirtualGroupFamily): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
    if (message.globalVirtualGroupIds) {
      obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
    } else {
      obj.globalVirtualGroupIds = [];
    }
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventUpdateGlobalVirtualGroupFamily>, I>>(object: I): EventUpdateGlobalVirtualGroupFamily {
    const message = createBaseEventUpdateGlobalVirtualGroupFamily();
    message.id = object.id ?? 0;
    message.primarySpId = object.primarySpId ?? 0;
    message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
    return message;
  },
  fromSDK(object: EventUpdateGlobalVirtualGroupFamilySDKType): EventUpdateGlobalVirtualGroupFamily {
    return {
      id: object?.id,
      primarySpId: object?.primary_sp_id,
      globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e: any) => e) : []
    };
  },
  toSDK(message: EventUpdateGlobalVirtualGroupFamily): EventUpdateGlobalVirtualGroupFamilySDKType {
    const obj: any = {};
    obj.id = message.id;
    obj.primary_sp_id = message.primarySpId;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    return obj;
  },
  fromAmino(object: EventUpdateGlobalVirtualGroupFamilyAmino): EventUpdateGlobalVirtualGroupFamily {
    const message = createBaseEventUpdateGlobalVirtualGroupFamily();
    if (object.id !== undefined && object.id !== null) {
      message.id = object.id;
    }
    if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
      message.primarySpId = object.primary_sp_id;
    }
    message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
    return message;
  },
  toAmino(message: EventUpdateGlobalVirtualGroupFamily): EventUpdateGlobalVirtualGroupFamilyAmino {
    const obj: any = {};
    obj.id = message.id;
    obj.primary_sp_id = message.primarySpId;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    return obj;
  },
  fromAminoMsg(object: EventUpdateGlobalVirtualGroupFamilyAminoMsg): EventUpdateGlobalVirtualGroupFamily {
    return EventUpdateGlobalVirtualGroupFamily.fromAmino(object.value);
  },
  fromProtoMsg(message: EventUpdateGlobalVirtualGroupFamilyProtoMsg): EventUpdateGlobalVirtualGroupFamily {
    return EventUpdateGlobalVirtualGroupFamily.decode(message.value);
  },
  toProto(message: EventUpdateGlobalVirtualGroupFamily): Uint8Array {
    return EventUpdateGlobalVirtualGroupFamily.encode(message).finish();
  },
  toProtoMsg(message: EventUpdateGlobalVirtualGroupFamily): EventUpdateGlobalVirtualGroupFamilyProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventUpdateGlobalVirtualGroupFamily",
      value: EventUpdateGlobalVirtualGroupFamily.encode(message).finish()
    };
  }
};
function createBaseEventDeleteGlobalVirtualGroupFamily(): EventDeleteGlobalVirtualGroupFamily {
  return {
    id: 0,
    primarySpId: 0
  };
}
export const EventDeleteGlobalVirtualGroupFamily = {
  typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroupFamily",
  encode(message: EventDeleteGlobalVirtualGroupFamily, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.primarySpId !== 0) {
      writer.uint32(16).uint32(message.primarySpId);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventDeleteGlobalVirtualGroupFamily {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDeleteGlobalVirtualGroupFamily();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.uint32();
          break;
        case 2:
          message.primarySpId = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventDeleteGlobalVirtualGroupFamily {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      primarySpId: isSet(object.primarySpId) ? Number(object.primarySpId) : 0
    };
  },
  toJSON(message: EventDeleteGlobalVirtualGroupFamily): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.primarySpId !== undefined && (obj.primarySpId = Math.round(message.primarySpId));
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventDeleteGlobalVirtualGroupFamily>, I>>(object: I): EventDeleteGlobalVirtualGroupFamily {
    const message = createBaseEventDeleteGlobalVirtualGroupFamily();
    message.id = object.id ?? 0;
    message.primarySpId = object.primarySpId ?? 0;
    return message;
  },
  fromSDK(object: EventDeleteGlobalVirtualGroupFamilySDKType): EventDeleteGlobalVirtualGroupFamily {
    return {
      id: object?.id,
      primarySpId: object?.primary_sp_id
    };
  },
  toSDK(message: EventDeleteGlobalVirtualGroupFamily): EventDeleteGlobalVirtualGroupFamilySDKType {
    const obj: any = {};
    obj.id = message.id;
    obj.primary_sp_id = message.primarySpId;
    return obj;
  },
  fromAmino(object: EventDeleteGlobalVirtualGroupFamilyAmino): EventDeleteGlobalVirtualGroupFamily {
    const message = createBaseEventDeleteGlobalVirtualGroupFamily();
    if (object.id !== undefined && object.id !== null) {
      message.id = object.id;
    }
    if (object.primary_sp_id !== undefined && object.primary_sp_id !== null) {
      message.primarySpId = object.primary_sp_id;
    }
    return message;
  },
  toAmino(message: EventDeleteGlobalVirtualGroupFamily): EventDeleteGlobalVirtualGroupFamilyAmino {
    const obj: any = {};
    obj.id = message.id;
    obj.primary_sp_id = message.primarySpId;
    return obj;
  },
  fromAminoMsg(object: EventDeleteGlobalVirtualGroupFamilyAminoMsg): EventDeleteGlobalVirtualGroupFamily {
    return EventDeleteGlobalVirtualGroupFamily.fromAmino(object.value);
  },
  fromProtoMsg(message: EventDeleteGlobalVirtualGroupFamilyProtoMsg): EventDeleteGlobalVirtualGroupFamily {
    return EventDeleteGlobalVirtualGroupFamily.decode(message.value);
  },
  toProto(message: EventDeleteGlobalVirtualGroupFamily): Uint8Array {
    return EventDeleteGlobalVirtualGroupFamily.encode(message).finish();
  },
  toProtoMsg(message: EventDeleteGlobalVirtualGroupFamily): EventDeleteGlobalVirtualGroupFamilyProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventDeleteGlobalVirtualGroupFamily",
      value: EventDeleteGlobalVirtualGroupFamily.encode(message).finish()
    };
  }
};
function createBaseEventCreateLocalVirtualGroup(): EventCreateLocalVirtualGroup {
  return {
    id: 0,
    bucketId: "",
    globalVirtualGroupId: 0,
    storedSize: Long.UZERO
  };
}
export const EventCreateLocalVirtualGroup = {
  typeUrl: "/greenfield.virtualgroup.EventCreateLocalVirtualGroup",
  encode(message: EventCreateLocalVirtualGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.bucketId !== "") {
      writer.uint32(18).string(message.bucketId);
    }
    if (message.globalVirtualGroupId !== 0) {
      writer.uint32(24).uint32(message.globalVirtualGroupId);
    }
    if (!message.storedSize.isZero()) {
      writer.uint32(32).uint64(message.storedSize);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateLocalVirtualGroup {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCreateLocalVirtualGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.uint32();
          break;
        case 2:
          message.bucketId = reader.string();
          break;
        case 3:
          message.globalVirtualGroupId = reader.uint32();
          break;
        case 4:
          message.storedSize = (reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventCreateLocalVirtualGroup {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      bucketId: isSet(object.bucketId) ? String(object.bucketId) : "",
      globalVirtualGroupId: isSet(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0,
      storedSize: isSet(object.storedSize) ? Long.fromValue(object.storedSize) : Long.UZERO
    };
  },
  toJSON(message: EventCreateLocalVirtualGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.bucketId !== undefined && (obj.bucketId = message.bucketId);
    message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
    message.storedSize !== undefined && (obj.storedSize = (message.storedSize || Long.UZERO).toString());
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventCreateLocalVirtualGroup>, I>>(object: I): EventCreateLocalVirtualGroup {
    const message = createBaseEventCreateLocalVirtualGroup();
    message.id = object.id ?? 0;
    message.bucketId = object.bucketId ?? "";
    message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
    message.storedSize = object.storedSize !== undefined && object.storedSize !== null ? Long.fromValue(object.storedSize) : Long.UZERO;
    return message;
  },
  fromSDK(object: EventCreateLocalVirtualGroupSDKType): EventCreateLocalVirtualGroup {
    return {
      id: object?.id,
      bucketId: object?.bucket_id,
      globalVirtualGroupId: object?.global_virtual_group_id,
      storedSize: object?.stored_size
    };
  },
  toSDK(message: EventCreateLocalVirtualGroup): EventCreateLocalVirtualGroupSDKType {
    const obj: any = {};
    obj.id = message.id;
    obj.bucket_id = message.bucketId;
    obj.global_virtual_group_id = message.globalVirtualGroupId;
    obj.stored_size = message.storedSize;
    return obj;
  },
  fromAmino(object: EventCreateLocalVirtualGroupAmino): EventCreateLocalVirtualGroup {
    const message = createBaseEventCreateLocalVirtualGroup();
    if (object.id !== undefined && object.id !== null) {
      message.id = object.id;
    }
    if (object.bucket_id !== undefined && object.bucket_id !== null) {
      message.bucketId = object.bucket_id;
    }
    if (object.global_virtual_group_id !== undefined && object.global_virtual_group_id !== null) {
      message.globalVirtualGroupId = object.global_virtual_group_id;
    }
    if (object.stored_size !== undefined && object.stored_size !== null) {
      message.storedSize = Long.fromString(object.stored_size);
    }
    return message;
  },
  toAmino(message: EventCreateLocalVirtualGroup): EventCreateLocalVirtualGroupAmino {
    const obj: any = {};
    obj.id = message.id;
    obj.bucket_id = message.bucketId;
    obj.global_virtual_group_id = message.globalVirtualGroupId;
    obj.stored_size = message.storedSize ? message.storedSize.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object: EventCreateLocalVirtualGroupAminoMsg): EventCreateLocalVirtualGroup {
    return EventCreateLocalVirtualGroup.fromAmino(object.value);
  },
  fromProtoMsg(message: EventCreateLocalVirtualGroupProtoMsg): EventCreateLocalVirtualGroup {
    return EventCreateLocalVirtualGroup.decode(message.value);
  },
  toProto(message: EventCreateLocalVirtualGroup): Uint8Array {
    return EventCreateLocalVirtualGroup.encode(message).finish();
  },
  toProtoMsg(message: EventCreateLocalVirtualGroup): EventCreateLocalVirtualGroupProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventCreateLocalVirtualGroup",
      value: EventCreateLocalVirtualGroup.encode(message).finish()
    };
  }
};
function createBaseEventUpdateLocalVirtualGroup(): EventUpdateLocalVirtualGroup {
  return {
    id: 0,
    bucketId: "",
    globalVirtualGroupId: 0,
    storedSize: Long.UZERO
  };
}
export const EventUpdateLocalVirtualGroup = {
  typeUrl: "/greenfield.virtualgroup.EventUpdateLocalVirtualGroup",
  encode(message: EventUpdateLocalVirtualGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.bucketId !== "") {
      writer.uint32(18).string(message.bucketId);
    }
    if (message.globalVirtualGroupId !== 0) {
      writer.uint32(24).uint32(message.globalVirtualGroupId);
    }
    if (!message.storedSize.isZero()) {
      writer.uint32(32).uint64(message.storedSize);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventUpdateLocalVirtualGroup {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventUpdateLocalVirtualGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.uint32();
          break;
        case 2:
          message.bucketId = reader.string();
          break;
        case 3:
          message.globalVirtualGroupId = reader.uint32();
          break;
        case 4:
          message.storedSize = (reader.uint64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventUpdateLocalVirtualGroup {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      bucketId: isSet(object.bucketId) ? String(object.bucketId) : "",
      globalVirtualGroupId: isSet(object.globalVirtualGroupId) ? Number(object.globalVirtualGroupId) : 0,
      storedSize: isSet(object.storedSize) ? Long.fromValue(object.storedSize) : Long.UZERO
    };
  },
  toJSON(message: EventUpdateLocalVirtualGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.bucketId !== undefined && (obj.bucketId = message.bucketId);
    message.globalVirtualGroupId !== undefined && (obj.globalVirtualGroupId = Math.round(message.globalVirtualGroupId));
    message.storedSize !== undefined && (obj.storedSize = (message.storedSize || Long.UZERO).toString());
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventUpdateLocalVirtualGroup>, I>>(object: I): EventUpdateLocalVirtualGroup {
    const message = createBaseEventUpdateLocalVirtualGroup();
    message.id = object.id ?? 0;
    message.bucketId = object.bucketId ?? "";
    message.globalVirtualGroupId = object.globalVirtualGroupId ?? 0;
    message.storedSize = object.storedSize !== undefined && object.storedSize !== null ? Long.fromValue(object.storedSize) : Long.UZERO;
    return message;
  },
  fromSDK(object: EventUpdateLocalVirtualGroupSDKType): EventUpdateLocalVirtualGroup {
    return {
      id: object?.id,
      bucketId: object?.bucket_id,
      globalVirtualGroupId: object?.global_virtual_group_id,
      storedSize: object?.stored_size
    };
  },
  toSDK(message: EventUpdateLocalVirtualGroup): EventUpdateLocalVirtualGroupSDKType {
    const obj: any = {};
    obj.id = message.id;
    obj.bucket_id = message.bucketId;
    obj.global_virtual_group_id = message.globalVirtualGroupId;
    obj.stored_size = message.storedSize;
    return obj;
  },
  fromAmino(object: EventUpdateLocalVirtualGroupAmino): EventUpdateLocalVirtualGroup {
    const message = createBaseEventUpdateLocalVirtualGroup();
    if (object.id !== undefined && object.id !== null) {
      message.id = object.id;
    }
    if (object.bucket_id !== undefined && object.bucket_id !== null) {
      message.bucketId = object.bucket_id;
    }
    if (object.global_virtual_group_id !== undefined && object.global_virtual_group_id !== null) {
      message.globalVirtualGroupId = object.global_virtual_group_id;
    }
    if (object.stored_size !== undefined && object.stored_size !== null) {
      message.storedSize = Long.fromString(object.stored_size);
    }
    return message;
  },
  toAmino(message: EventUpdateLocalVirtualGroup): EventUpdateLocalVirtualGroupAmino {
    const obj: any = {};
    obj.id = message.id;
    obj.bucket_id = message.bucketId;
    obj.global_virtual_group_id = message.globalVirtualGroupId;
    obj.stored_size = message.storedSize ? message.storedSize.toString() : undefined;
    return obj;
  },
  fromAminoMsg(object: EventUpdateLocalVirtualGroupAminoMsg): EventUpdateLocalVirtualGroup {
    return EventUpdateLocalVirtualGroup.fromAmino(object.value);
  },
  fromProtoMsg(message: EventUpdateLocalVirtualGroupProtoMsg): EventUpdateLocalVirtualGroup {
    return EventUpdateLocalVirtualGroup.decode(message.value);
  },
  toProto(message: EventUpdateLocalVirtualGroup): Uint8Array {
    return EventUpdateLocalVirtualGroup.encode(message).finish();
  },
  toProtoMsg(message: EventUpdateLocalVirtualGroup): EventUpdateLocalVirtualGroupProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventUpdateLocalVirtualGroup",
      value: EventUpdateLocalVirtualGroup.encode(message).finish()
    };
  }
};
function createBaseEventDeleteLocalVirtualGroup(): EventDeleteLocalVirtualGroup {
  return {
    id: 0,
    bucketId: ""
  };
}
export const EventDeleteLocalVirtualGroup = {
  typeUrl: "/greenfield.virtualgroup.EventDeleteLocalVirtualGroup",
  encode(message: EventDeleteLocalVirtualGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.bucketId !== "") {
      writer.uint32(18).string(message.bucketId);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventDeleteLocalVirtualGroup {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDeleteLocalVirtualGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.uint32();
          break;
        case 2:
          message.bucketId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventDeleteLocalVirtualGroup {
    return {
      id: isSet(object.id) ? Number(object.id) : 0,
      bucketId: isSet(object.bucketId) ? String(object.bucketId) : ""
    };
  },
  toJSON(message: EventDeleteLocalVirtualGroup): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    message.bucketId !== undefined && (obj.bucketId = message.bucketId);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventDeleteLocalVirtualGroup>, I>>(object: I): EventDeleteLocalVirtualGroup {
    const message = createBaseEventDeleteLocalVirtualGroup();
    message.id = object.id ?? 0;
    message.bucketId = object.bucketId ?? "";
    return message;
  },
  fromSDK(object: EventDeleteLocalVirtualGroupSDKType): EventDeleteLocalVirtualGroup {
    return {
      id: object?.id,
      bucketId: object?.bucket_id
    };
  },
  toSDK(message: EventDeleteLocalVirtualGroup): EventDeleteLocalVirtualGroupSDKType {
    const obj: any = {};
    obj.id = message.id;
    obj.bucket_id = message.bucketId;
    return obj;
  },
  fromAmino(object: EventDeleteLocalVirtualGroupAmino): EventDeleteLocalVirtualGroup {
    const message = createBaseEventDeleteLocalVirtualGroup();
    if (object.id !== undefined && object.id !== null) {
      message.id = object.id;
    }
    if (object.bucket_id !== undefined && object.bucket_id !== null) {
      message.bucketId = object.bucket_id;
    }
    return message;
  },
  toAmino(message: EventDeleteLocalVirtualGroup): EventDeleteLocalVirtualGroupAmino {
    const obj: any = {};
    obj.id = message.id;
    obj.bucket_id = message.bucketId;
    return obj;
  },
  fromAminoMsg(object: EventDeleteLocalVirtualGroupAminoMsg): EventDeleteLocalVirtualGroup {
    return EventDeleteLocalVirtualGroup.fromAmino(object.value);
  },
  fromProtoMsg(message: EventDeleteLocalVirtualGroupProtoMsg): EventDeleteLocalVirtualGroup {
    return EventDeleteLocalVirtualGroup.decode(message.value);
  },
  toProto(message: EventDeleteLocalVirtualGroup): Uint8Array {
    return EventDeleteLocalVirtualGroup.encode(message).finish();
  },
  toProtoMsg(message: EventDeleteLocalVirtualGroup): EventDeleteLocalVirtualGroupProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventDeleteLocalVirtualGroup",
      value: EventDeleteLocalVirtualGroup.encode(message).finish()
    };
  }
};
function createBaseEventSwapOut(): EventSwapOut {
  return {
    storageProviderId: 0,
    globalVirtualGroupFamilyId: 0,
    globalVirtualGroupIds: [],
    successorSpId: 0
  };
}
export const EventSwapOut = {
  typeUrl: "/greenfield.virtualgroup.EventSwapOut",
  encode(message: EventSwapOut, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.storageProviderId !== 0) {
      writer.uint32(8).uint32(message.storageProviderId);
    }
    if (message.globalVirtualGroupFamilyId !== 0) {
      writer.uint32(16).uint32(message.globalVirtualGroupFamilyId);
    }
    writer.uint32(26).fork();
    for (const v of message.globalVirtualGroupIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    if (message.successorSpId !== 0) {
      writer.uint32(32).uint32(message.successorSpId);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventSwapOut {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSwapOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.storageProviderId = reader.uint32();
          break;
        case 2:
          message.globalVirtualGroupFamilyId = reader.uint32();
          break;
        case 3:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.globalVirtualGroupIds.push(reader.uint32());
            }
          } else {
            message.globalVirtualGroupIds.push(reader.uint32());
          }
          break;
        case 4:
          message.successorSpId = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventSwapOut {
    return {
      storageProviderId: isSet(object.storageProviderId) ? Number(object.storageProviderId) : 0,
      globalVirtualGroupFamilyId: isSet(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
      globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e: any) => Number(e)) : [],
      successorSpId: isSet(object.successorSpId) ? Number(object.successorSpId) : 0
    };
  },
  toJSON(message: EventSwapOut): unknown {
    const obj: any = {};
    message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
    message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
    if (message.globalVirtualGroupIds) {
      obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
    } else {
      obj.globalVirtualGroupIds = [];
    }
    message.successorSpId !== undefined && (obj.successorSpId = Math.round(message.successorSpId));
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventSwapOut>, I>>(object: I): EventSwapOut {
    const message = createBaseEventSwapOut();
    message.storageProviderId = object.storageProviderId ?? 0;
    message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
    message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
    message.successorSpId = object.successorSpId ?? 0;
    return message;
  },
  fromSDK(object: EventSwapOutSDKType): EventSwapOut {
    return {
      storageProviderId: object?.storage_provider_id,
      globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
      globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e: any) => e) : [],
      successorSpId: object?.successor_sp_id
    };
  },
  toSDK(message: EventSwapOut): EventSwapOutSDKType {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    obj.successor_sp_id = message.successorSpId;
    return obj;
  },
  fromAmino(object: EventSwapOutAmino): EventSwapOut {
    const message = createBaseEventSwapOut();
    if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
      message.storageProviderId = object.storage_provider_id;
    }
    if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
      message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
    }
    message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
    if (object.successor_sp_id !== undefined && object.successor_sp_id !== null) {
      message.successorSpId = object.successor_sp_id;
    }
    return message;
  },
  toAmino(message: EventSwapOut): EventSwapOutAmino {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    obj.successor_sp_id = message.successorSpId;
    return obj;
  },
  fromAminoMsg(object: EventSwapOutAminoMsg): EventSwapOut {
    return EventSwapOut.fromAmino(object.value);
  },
  fromProtoMsg(message: EventSwapOutProtoMsg): EventSwapOut {
    return EventSwapOut.decode(message.value);
  },
  toProto(message: EventSwapOut): Uint8Array {
    return EventSwapOut.encode(message).finish();
  },
  toProtoMsg(message: EventSwapOut): EventSwapOutProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventSwapOut",
      value: EventSwapOut.encode(message).finish()
    };
  }
};
function createBaseEventCompleteSwapOut(): EventCompleteSwapOut {
  return {
    storageProviderId: 0,
    srcStorageProviderId: 0,
    globalVirtualGroupFamilyId: 0,
    globalVirtualGroupIds: []
  };
}
export const EventCompleteSwapOut = {
  typeUrl: "/greenfield.virtualgroup.EventCompleteSwapOut",
  encode(message: EventCompleteSwapOut, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.storageProviderId !== 0) {
      writer.uint32(8).uint32(message.storageProviderId);
    }
    if (message.srcStorageProviderId !== 0) {
      writer.uint32(16).uint32(message.srcStorageProviderId);
    }
    if (message.globalVirtualGroupFamilyId !== 0) {
      writer.uint32(24).uint32(message.globalVirtualGroupFamilyId);
    }
    writer.uint32(34).fork();
    for (const v of message.globalVirtualGroupIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventCompleteSwapOut {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCompleteSwapOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.storageProviderId = reader.uint32();
          break;
        case 2:
          message.srcStorageProviderId = reader.uint32();
          break;
        case 3:
          message.globalVirtualGroupFamilyId = reader.uint32();
          break;
        case 4:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.globalVirtualGroupIds.push(reader.uint32());
            }
          } else {
            message.globalVirtualGroupIds.push(reader.uint32());
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventCompleteSwapOut {
    return {
      storageProviderId: isSet(object.storageProviderId) ? Number(object.storageProviderId) : 0,
      srcStorageProviderId: isSet(object.srcStorageProviderId) ? Number(object.srcStorageProviderId) : 0,
      globalVirtualGroupFamilyId: isSet(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
      globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e: any) => Number(e)) : []
    };
  },
  toJSON(message: EventCompleteSwapOut): unknown {
    const obj: any = {};
    message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
    message.srcStorageProviderId !== undefined && (obj.srcStorageProviderId = Math.round(message.srcStorageProviderId));
    message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
    if (message.globalVirtualGroupIds) {
      obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
    } else {
      obj.globalVirtualGroupIds = [];
    }
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventCompleteSwapOut>, I>>(object: I): EventCompleteSwapOut {
    const message = createBaseEventCompleteSwapOut();
    message.storageProviderId = object.storageProviderId ?? 0;
    message.srcStorageProviderId = object.srcStorageProviderId ?? 0;
    message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
    message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
    return message;
  },
  fromSDK(object: EventCompleteSwapOutSDKType): EventCompleteSwapOut {
    return {
      storageProviderId: object?.storage_provider_id,
      srcStorageProviderId: object?.src_storage_provider_id,
      globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
      globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e: any) => e) : []
    };
  },
  toSDK(message: EventCompleteSwapOut): EventCompleteSwapOutSDKType {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.src_storage_provider_id = message.srcStorageProviderId;
    obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    return obj;
  },
  fromAmino(object: EventCompleteSwapOutAmino): EventCompleteSwapOut {
    const message = createBaseEventCompleteSwapOut();
    if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
      message.storageProviderId = object.storage_provider_id;
    }
    if (object.src_storage_provider_id !== undefined && object.src_storage_provider_id !== null) {
      message.srcStorageProviderId = object.src_storage_provider_id;
    }
    if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
      message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
    }
    message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
    return message;
  },
  toAmino(message: EventCompleteSwapOut): EventCompleteSwapOutAmino {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.src_storage_provider_id = message.srcStorageProviderId;
    obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    return obj;
  },
  fromAminoMsg(object: EventCompleteSwapOutAminoMsg): EventCompleteSwapOut {
    return EventCompleteSwapOut.fromAmino(object.value);
  },
  fromProtoMsg(message: EventCompleteSwapOutProtoMsg): EventCompleteSwapOut {
    return EventCompleteSwapOut.decode(message.value);
  },
  toProto(message: EventCompleteSwapOut): Uint8Array {
    return EventCompleteSwapOut.encode(message).finish();
  },
  toProtoMsg(message: EventCompleteSwapOut): EventCompleteSwapOutProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventCompleteSwapOut",
      value: EventCompleteSwapOut.encode(message).finish()
    };
  }
};
function createBaseEventCancelSwapOut(): EventCancelSwapOut {
  return {
    storageProviderId: 0,
    globalVirtualGroupFamilyId: 0,
    globalVirtualGroupIds: [],
    successorSpId: 0
  };
}
export const EventCancelSwapOut = {
  typeUrl: "/greenfield.virtualgroup.EventCancelSwapOut",
  encode(message: EventCancelSwapOut, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.storageProviderId !== 0) {
      writer.uint32(8).uint32(message.storageProviderId);
    }
    if (message.globalVirtualGroupFamilyId !== 0) {
      writer.uint32(16).uint32(message.globalVirtualGroupFamilyId);
    }
    writer.uint32(26).fork();
    for (const v of message.globalVirtualGroupIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    if (message.successorSpId !== 0) {
      writer.uint32(32).uint32(message.successorSpId);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventCancelSwapOut {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCancelSwapOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.storageProviderId = reader.uint32();
          break;
        case 2:
          message.globalVirtualGroupFamilyId = reader.uint32();
          break;
        case 3:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.globalVirtualGroupIds.push(reader.uint32());
            }
          } else {
            message.globalVirtualGroupIds.push(reader.uint32());
          }
          break;
        case 4:
          message.successorSpId = reader.uint32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventCancelSwapOut {
    return {
      storageProviderId: isSet(object.storageProviderId) ? Number(object.storageProviderId) : 0,
      globalVirtualGroupFamilyId: isSet(object.globalVirtualGroupFamilyId) ? Number(object.globalVirtualGroupFamilyId) : 0,
      globalVirtualGroupIds: Array.isArray(object?.globalVirtualGroupIds) ? object.globalVirtualGroupIds.map((e: any) => Number(e)) : [],
      successorSpId: isSet(object.successorSpId) ? Number(object.successorSpId) : 0
    };
  },
  toJSON(message: EventCancelSwapOut): unknown {
    const obj: any = {};
    message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
    message.globalVirtualGroupFamilyId !== undefined && (obj.globalVirtualGroupFamilyId = Math.round(message.globalVirtualGroupFamilyId));
    if (message.globalVirtualGroupIds) {
      obj.globalVirtualGroupIds = message.globalVirtualGroupIds.map(e => Math.round(e));
    } else {
      obj.globalVirtualGroupIds = [];
    }
    message.successorSpId !== undefined && (obj.successorSpId = Math.round(message.successorSpId));
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventCancelSwapOut>, I>>(object: I): EventCancelSwapOut {
    const message = createBaseEventCancelSwapOut();
    message.storageProviderId = object.storageProviderId ?? 0;
    message.globalVirtualGroupFamilyId = object.globalVirtualGroupFamilyId ?? 0;
    message.globalVirtualGroupIds = object.globalVirtualGroupIds?.map(e => e) || [];
    message.successorSpId = object.successorSpId ?? 0;
    return message;
  },
  fromSDK(object: EventCancelSwapOutSDKType): EventCancelSwapOut {
    return {
      storageProviderId: object?.storage_provider_id,
      globalVirtualGroupFamilyId: object?.global_virtual_group_family_id,
      globalVirtualGroupIds: Array.isArray(object?.global_virtual_group_ids) ? object.global_virtual_group_ids.map((e: any) => e) : [],
      successorSpId: object?.successor_sp_id
    };
  },
  toSDK(message: EventCancelSwapOut): EventCancelSwapOutSDKType {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    obj.successor_sp_id = message.successorSpId;
    return obj;
  },
  fromAmino(object: EventCancelSwapOutAmino): EventCancelSwapOut {
    const message = createBaseEventCancelSwapOut();
    if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
      message.storageProviderId = object.storage_provider_id;
    }
    if (object.global_virtual_group_family_id !== undefined && object.global_virtual_group_family_id !== null) {
      message.globalVirtualGroupFamilyId = object.global_virtual_group_family_id;
    }
    message.globalVirtualGroupIds = object.global_virtual_group_ids?.map(e => e) || [];
    if (object.successor_sp_id !== undefined && object.successor_sp_id !== null) {
      message.successorSpId = object.successor_sp_id;
    }
    return message;
  },
  toAmino(message: EventCancelSwapOut): EventCancelSwapOutAmino {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.global_virtual_group_family_id = message.globalVirtualGroupFamilyId;
    if (message.globalVirtualGroupIds) {
      obj.global_virtual_group_ids = message.globalVirtualGroupIds.map(e => e);
    } else {
      obj.global_virtual_group_ids = [];
    }
    obj.successor_sp_id = message.successorSpId;
    return obj;
  },
  fromAminoMsg(object: EventCancelSwapOutAminoMsg): EventCancelSwapOut {
    return EventCancelSwapOut.fromAmino(object.value);
  },
  fromProtoMsg(message: EventCancelSwapOutProtoMsg): EventCancelSwapOut {
    return EventCancelSwapOut.decode(message.value);
  },
  toProto(message: EventCancelSwapOut): Uint8Array {
    return EventCancelSwapOut.encode(message).finish();
  },
  toProtoMsg(message: EventCancelSwapOut): EventCancelSwapOutProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventCancelSwapOut",
      value: EventCancelSwapOut.encode(message).finish()
    };
  }
};
function createBaseEventStorageProviderExit(): EventStorageProviderExit {
  return {
    storageProviderId: 0,
    operatorAddress: ""
  };
}
export const EventStorageProviderExit = {
  typeUrl: "/greenfield.virtualgroup.EventStorageProviderExit",
  encode(message: EventStorageProviderExit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.storageProviderId !== 0) {
      writer.uint32(8).uint32(message.storageProviderId);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(18).string(message.operatorAddress);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventStorageProviderExit {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventStorageProviderExit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.storageProviderId = reader.uint32();
          break;
        case 2:
          message.operatorAddress = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventStorageProviderExit {
    return {
      storageProviderId: isSet(object.storageProviderId) ? Number(object.storageProviderId) : 0,
      operatorAddress: isSet(object.operatorAddress) ? String(object.operatorAddress) : ""
    };
  },
  toJSON(message: EventStorageProviderExit): unknown {
    const obj: any = {};
    message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
    message.operatorAddress !== undefined && (obj.operatorAddress = message.operatorAddress);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventStorageProviderExit>, I>>(object: I): EventStorageProviderExit {
    const message = createBaseEventStorageProviderExit();
    message.storageProviderId = object.storageProviderId ?? 0;
    message.operatorAddress = object.operatorAddress ?? "";
    return message;
  },
  fromSDK(object: EventStorageProviderExitSDKType): EventStorageProviderExit {
    return {
      storageProviderId: object?.storage_provider_id,
      operatorAddress: object?.operator_address
    };
  },
  toSDK(message: EventStorageProviderExit): EventStorageProviderExitSDKType {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.operator_address = message.operatorAddress;
    return obj;
  },
  fromAmino(object: EventStorageProviderExitAmino): EventStorageProviderExit {
    const message = createBaseEventStorageProviderExit();
    if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
      message.storageProviderId = object.storage_provider_id;
    }
    if (object.operator_address !== undefined && object.operator_address !== null) {
      message.operatorAddress = object.operator_address;
    }
    return message;
  },
  toAmino(message: EventStorageProviderExit): EventStorageProviderExitAmino {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.operator_address = message.operatorAddress;
    return obj;
  },
  fromAminoMsg(object: EventStorageProviderExitAminoMsg): EventStorageProviderExit {
    return EventStorageProviderExit.fromAmino(object.value);
  },
  fromProtoMsg(message: EventStorageProviderExitProtoMsg): EventStorageProviderExit {
    return EventStorageProviderExit.decode(message.value);
  },
  toProto(message: EventStorageProviderExit): Uint8Array {
    return EventStorageProviderExit.encode(message).finish();
  },
  toProtoMsg(message: EventStorageProviderExit): EventStorageProviderExitProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventStorageProviderExit",
      value: EventStorageProviderExit.encode(message).finish()
    };
  }
};
function createBaseEventCompleteStorageProviderExit(): EventCompleteStorageProviderExit {
  return {
    storageProviderId: 0,
    operatorAddress: "",
    totalDeposit: ""
  };
}
export const EventCompleteStorageProviderExit = {
  typeUrl: "/greenfield.virtualgroup.EventCompleteStorageProviderExit",
  encode(message: EventCompleteStorageProviderExit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.storageProviderId !== 0) {
      writer.uint32(8).uint32(message.storageProviderId);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(18).string(message.operatorAddress);
    }
    if (message.totalDeposit !== "") {
      writer.uint32(26).string(message.totalDeposit);
    }
    return writer;
  },
  decode(input: _m0.Reader | Uint8Array, length?: number): EventCompleteStorageProviderExit {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCompleteStorageProviderExit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.storageProviderId = reader.uint32();
          break;
        case 2:
          message.operatorAddress = reader.string();
          break;
        case 3:
          message.totalDeposit = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): EventCompleteStorageProviderExit {
    return {
      storageProviderId: isSet(object.storageProviderId) ? Number(object.storageProviderId) : 0,
      operatorAddress: isSet(object.operatorAddress) ? String(object.operatorAddress) : "",
      totalDeposit: isSet(object.totalDeposit) ? String(object.totalDeposit) : ""
    };
  },
  toJSON(message: EventCompleteStorageProviderExit): unknown {
    const obj: any = {};
    message.storageProviderId !== undefined && (obj.storageProviderId = Math.round(message.storageProviderId));
    message.operatorAddress !== undefined && (obj.operatorAddress = message.operatorAddress);
    message.totalDeposit !== undefined && (obj.totalDeposit = message.totalDeposit);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<EventCompleteStorageProviderExit>, I>>(object: I): EventCompleteStorageProviderExit {
    const message = createBaseEventCompleteStorageProviderExit();
    message.storageProviderId = object.storageProviderId ?? 0;
    message.operatorAddress = object.operatorAddress ?? "";
    message.totalDeposit = object.totalDeposit ?? "";
    return message;
  },
  fromSDK(object: EventCompleteStorageProviderExitSDKType): EventCompleteStorageProviderExit {
    return {
      storageProviderId: object?.storage_provider_id,
      operatorAddress: object?.operator_address,
      totalDeposit: object?.total_deposit
    };
  },
  toSDK(message: EventCompleteStorageProviderExit): EventCompleteStorageProviderExitSDKType {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.operator_address = message.operatorAddress;
    obj.total_deposit = message.totalDeposit;
    return obj;
  },
  fromAmino(object: EventCompleteStorageProviderExitAmino): EventCompleteStorageProviderExit {
    const message = createBaseEventCompleteStorageProviderExit();
    if (object.storage_provider_id !== undefined && object.storage_provider_id !== null) {
      message.storageProviderId = object.storage_provider_id;
    }
    if (object.operator_address !== undefined && object.operator_address !== null) {
      message.operatorAddress = object.operator_address;
    }
    if (object.total_deposit !== undefined && object.total_deposit !== null) {
      message.totalDeposit = object.total_deposit;
    }
    return message;
  },
  toAmino(message: EventCompleteStorageProviderExit): EventCompleteStorageProviderExitAmino {
    const obj: any = {};
    obj.storage_provider_id = message.storageProviderId;
    obj.operator_address = message.operatorAddress;
    obj.total_deposit = message.totalDeposit;
    return obj;
  },
  fromAminoMsg(object: EventCompleteStorageProviderExitAminoMsg): EventCompleteStorageProviderExit {
    return EventCompleteStorageProviderExit.fromAmino(object.value);
  },
  fromProtoMsg(message: EventCompleteStorageProviderExitProtoMsg): EventCompleteStorageProviderExit {
    return EventCompleteStorageProviderExit.decode(message.value);
  },
  toProto(message: EventCompleteStorageProviderExit): Uint8Array {
    return EventCompleteStorageProviderExit.encode(message).finish();
  },
  toProtoMsg(message: EventCompleteStorageProviderExit): EventCompleteStorageProviderExitProtoMsg {
    return {
      typeUrl: "/greenfield.virtualgroup.EventCompleteStorageProviderExit",
      value: EventCompleteStorageProviderExit.encode(message).finish()
    };
  }
};