/* eslint-disable */
import { VoteResult, voteResultFromJSON, voteResultToJSON } from "./types";
import { Long, isSet, DeepPartial, Exact } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export const protobufPackage = "bnbchain.greenfield.challenge";
export interface EventStartChallenge {
  /** The id of challenge, which is generated by blockchain. */
  challenge_id: Long;
  /** The id of object info to be challenged. */

  object_id: string;
  /** The segment/piece index of the object info. */

  segment_index: number;
  /** The storage provider to be challenged. */

  sp_operator_address: string;
  /** The redundancy index, which comes from the index of storage providers. */

  redundancy_index: number;
  /** The challenger who submits the challenge. */

  challenger_address: string;
}
export interface EventAttestChallenge {
  /** The id of challenge. */
  challenge_id: Long;
  /** The result of challenge. */

  result: VoteResult;
  /** The slashed storage provider address. */

  sp_operator_address: string;
  /** The slashed amount from the storage provider. */

  slash_amount: string;
  /** The address of challenger. */

  challenger_address: string;
  /** The reward amount to the challenger. */

  challenger_reward_amount: string;
  /** The submitter of challenge attestation. */

  submitter_address: string;
  /** The reward amount to the submitter. */

  submitter_reward_amount: string;
  /** The reward amount to all validators. */

  validator_reward_amount: string;
}

function createBaseEventStartChallenge(): EventStartChallenge {
  return {
    challenge_id: Long.UZERO,
    object_id: "",
    segment_index: 0,
    sp_operator_address: "",
    redundancy_index: 0,
    challenger_address: ""
  };
}

export const EventStartChallenge = {
  encode(message: EventStartChallenge, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.challenge_id.isZero()) {
      writer.uint32(8).uint64(message.challenge_id);
    }

    if (message.object_id !== "") {
      writer.uint32(18).string(message.object_id);
    }

    if (message.segment_index !== 0) {
      writer.uint32(24).uint32(message.segment_index);
    }

    if (message.sp_operator_address !== "") {
      writer.uint32(34).string(message.sp_operator_address);
    }

    if (message.redundancy_index !== 0) {
      writer.uint32(40).int32(message.redundancy_index);
    }

    if (message.challenger_address !== "") {
      writer.uint32(50).string(message.challenger_address);
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventStartChallenge {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventStartChallenge();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.challenge_id = (reader.uint64() as Long);
          break;

        case 2:
          message.object_id = reader.string();
          break;

        case 3:
          message.segment_index = reader.uint32();
          break;

        case 4:
          message.sp_operator_address = reader.string();
          break;

        case 5:
          message.redundancy_index = reader.int32();
          break;

        case 6:
          message.challenger_address = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): EventStartChallenge {
    return {
      challenge_id: isSet(object.challenge_id) ? Long.fromValue(object.challenge_id) : Long.UZERO,
      object_id: isSet(object.object_id) ? String(object.object_id) : "",
      segment_index: isSet(object.segment_index) ? Number(object.segment_index) : 0,
      sp_operator_address: isSet(object.sp_operator_address) ? String(object.sp_operator_address) : "",
      redundancy_index: isSet(object.redundancy_index) ? Number(object.redundancy_index) : 0,
      challenger_address: isSet(object.challenger_address) ? String(object.challenger_address) : ""
    };
  },

  toJSON(message: EventStartChallenge): unknown {
    const obj: any = {};
    message.challenge_id !== undefined && (obj.challenge_id = (message.challenge_id || Long.UZERO).toString());
    message.object_id !== undefined && (obj.object_id = message.object_id);
    message.segment_index !== undefined && (obj.segment_index = Math.round(message.segment_index));
    message.sp_operator_address !== undefined && (obj.sp_operator_address = message.sp_operator_address);
    message.redundancy_index !== undefined && (obj.redundancy_index = Math.round(message.redundancy_index));
    message.challenger_address !== undefined && (obj.challenger_address = message.challenger_address);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<EventStartChallenge>, I>>(object: I): EventStartChallenge {
    const message = createBaseEventStartChallenge();
    message.challenge_id = object.challenge_id !== undefined && object.challenge_id !== null ? Long.fromValue(object.challenge_id) : Long.UZERO;
    message.object_id = object.object_id ?? "";
    message.segment_index = object.segment_index ?? 0;
    message.sp_operator_address = object.sp_operator_address ?? "";
    message.redundancy_index = object.redundancy_index ?? 0;
    message.challenger_address = object.challenger_address ?? "";
    return message;
  }

};

function createBaseEventAttestChallenge(): EventAttestChallenge {
  return {
    challenge_id: Long.UZERO,
    result: 0,
    sp_operator_address: "",
    slash_amount: "",
    challenger_address: "",
    challenger_reward_amount: "",
    submitter_address: "",
    submitter_reward_amount: "",
    validator_reward_amount: ""
  };
}

export const EventAttestChallenge = {
  encode(message: EventAttestChallenge, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (!message.challenge_id.isZero()) {
      writer.uint32(8).uint64(message.challenge_id);
    }

    if (message.result !== 0) {
      writer.uint32(16).int32(message.result);
    }

    if (message.sp_operator_address !== "") {
      writer.uint32(26).string(message.sp_operator_address);
    }

    if (message.slash_amount !== "") {
      writer.uint32(34).string(message.slash_amount);
    }

    if (message.challenger_address !== "") {
      writer.uint32(42).string(message.challenger_address);
    }

    if (message.challenger_reward_amount !== "") {
      writer.uint32(50).string(message.challenger_reward_amount);
    }

    if (message.submitter_address !== "") {
      writer.uint32(58).string(message.submitter_address);
    }

    if (message.submitter_reward_amount !== "") {
      writer.uint32(66).string(message.submitter_reward_amount);
    }

    if (message.validator_reward_amount !== "") {
      writer.uint32(82).string(message.validator_reward_amount);
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventAttestChallenge {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttestChallenge();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.challenge_id = (reader.uint64() as Long);
          break;

        case 2:
          message.result = (reader.int32() as any);
          break;

        case 3:
          message.sp_operator_address = reader.string();
          break;

        case 4:
          message.slash_amount = reader.string();
          break;

        case 5:
          message.challenger_address = reader.string();
          break;

        case 6:
          message.challenger_reward_amount = reader.string();
          break;

        case 7:
          message.submitter_address = reader.string();
          break;

        case 8:
          message.submitter_reward_amount = reader.string();
          break;

        case 10:
          message.validator_reward_amount = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): EventAttestChallenge {
    return {
      challenge_id: isSet(object.challenge_id) ? Long.fromValue(object.challenge_id) : Long.UZERO,
      result: isSet(object.result) ? voteResultFromJSON(object.result) : 0,
      sp_operator_address: isSet(object.sp_operator_address) ? String(object.sp_operator_address) : "",
      slash_amount: isSet(object.slash_amount) ? String(object.slash_amount) : "",
      challenger_address: isSet(object.challenger_address) ? String(object.challenger_address) : "",
      challenger_reward_amount: isSet(object.challenger_reward_amount) ? String(object.challenger_reward_amount) : "",
      submitter_address: isSet(object.submitter_address) ? String(object.submitter_address) : "",
      submitter_reward_amount: isSet(object.submitter_reward_amount) ? String(object.submitter_reward_amount) : "",
      validator_reward_amount: isSet(object.validator_reward_amount) ? String(object.validator_reward_amount) : ""
    };
  },

  toJSON(message: EventAttestChallenge): unknown {
    const obj: any = {};
    message.challenge_id !== undefined && (obj.challenge_id = (message.challenge_id || Long.UZERO).toString());
    message.result !== undefined && (obj.result = voteResultToJSON(message.result));
    message.sp_operator_address !== undefined && (obj.sp_operator_address = message.sp_operator_address);
    message.slash_amount !== undefined && (obj.slash_amount = message.slash_amount);
    message.challenger_address !== undefined && (obj.challenger_address = message.challenger_address);
    message.challenger_reward_amount !== undefined && (obj.challenger_reward_amount = message.challenger_reward_amount);
    message.submitter_address !== undefined && (obj.submitter_address = message.submitter_address);
    message.submitter_reward_amount !== undefined && (obj.submitter_reward_amount = message.submitter_reward_amount);
    message.validator_reward_amount !== undefined && (obj.validator_reward_amount = message.validator_reward_amount);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<EventAttestChallenge>, I>>(object: I): EventAttestChallenge {
    const message = createBaseEventAttestChallenge();
    message.challenge_id = object.challenge_id !== undefined && object.challenge_id !== null ? Long.fromValue(object.challenge_id) : Long.UZERO;
    message.result = object.result ?? 0;
    message.sp_operator_address = object.sp_operator_address ?? "";
    message.slash_amount = object.slash_amount ?? "";
    message.challenger_address = object.challenger_address ?? "";
    message.challenger_reward_amount = object.challenger_reward_amount ?? "";
    message.submitter_address = object.submitter_address ?? "";
    message.submitter_reward_amount = object.submitter_reward_amount ?? "";
    message.validator_reward_amount = object.validator_reward_amount ?? "";
    return message;
  }

};